{"version":3,"sources":["css-layout.js"],"names":["root","factory","define","amd","exports","module","computeLayout","this","fillNodes","node","layout","isDirty","width","undefined","height","top","left","right","bottom","style","children","measure","length","Error","forEach","isUndefined","value","isRowDirection","flexDirection","CSS_FLEX_DIRECTION_ROW","CSS_FLEX_DIRECTION_ROW_REVERSE","isColumnDirection","CSS_FLEX_DIRECTION_COLUMN","CSS_FLEX_DIRECTION_COLUMN_REVERSE","getLeadingMargin","axis","marginStart","marginLeft","marginRight","marginTop","marginBottom","margin","getTrailingMargin","marginEnd","getLeadingPadding","paddingStart","paddingLeft","paddingRight","paddingTop","paddingBottom","padding","getTrailingPadding","paddingEnd","getLeadingBorder","borderStartWidth","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","borderWidth","getTrailingBorder","borderEndWidth","getLeadingPaddingAndBorder","getTrailingPaddingAndBorder","getBorderAxis","getMarginAxis","getPaddingAndBorderAxis","getJustifyContent","justifyContent","getAlignContent","alignContent","getAlignItem","child","alignSelf","alignItems","resolveAxis","direction","CSS_DIRECTION_RTL","resolveDirection","parentDirection","CSS_DIRECTION_INHERIT","CSS_DIRECTION_LTR","getFlexDirection","getCrossFlexDirection","getPositionType","position","isFlex","CSS_POSITION_RELATIVE","flex","isFlexWrap","flexWrap","getDimWithMargin","dim","isStyleDimDefined","isLayoutDimDefined","isPosDefined","pos","isMeasureDefined","getPosition","boundAxis","min","row","minWidth","row-reverse","column","minHeight","column-reverse","max","maxWidth","maxHeight","boundValue","fmaxf","a","b","setDimensionFromStyle","setTrailingPosition","trailing","getRelativePosition","leading","layoutNodeImpl","parentMaxWidth","parentMaxHeight","mainAxis","crossAxis","resolvedRowAxis","childCount","paddingAndBorderAxisResolvedRow","paddingAndBorderAxisColumn","isResolvedRowDimDefined","CSS_UNDEFINED","isRowUndefined","isColumnUndefined","measureDim","i","ii","isNodeFlexWrap","leadingPaddingAndBorderMain","leadingPaddingAndBorderCross","paddingAndBorderAxisMain","paddingAndBorderAxisCross","isMainDimDefined","isCrossDimDefined","isMainRowDirection","firstAbsoluteChild","currentAbsoluteChild","definedMainDim","startLine","endLine","alreadyComputedNextLayout","linesCrossDim","linesMainDim","linesCount","mainContentDim","flexibleChildrenCount","totalFlexible","nonFlexibleChildrenCount","isSimpleStackMain","CSS_JUSTIFY_FLEX_START","CSS_JUSTIFY_CENTER","firstComplexMain","isSimpleStackCross","firstComplexCross","firstFlexChild","currentFlexChild","mainDim","crossDim","lineIndex","nextAbsoluteChild","nextFlexChild","alignItem","CSS_ALIGN_STRETCH","CSS_POSITION_ABSOLUTE","nextContentDim","layoutNode","CSS_ALIGN_FLEX_START","leadingMainDim","betweenMainDim","remainingMainDim","baseMainDim","boundMainDim","flexibleMainDim","CSS_JUSTIFY_FLEX_END","CSS_JUSTIFY_SPACE_BETWEEN","CSS_JUSTIFY_SPACE_AROUND","containerCrossAxis","leadingCrossDim","dimCrossAxis","remainingCrossDim","CSS_ALIGN_CENTER","nodeCrossAxisInnerSize","remainingAlignContentDim","crossDimLead","currentLead","CSS_ALIGN_FLEX_END","endIndex","startIndex","lineHeight","alignContentAlignItem","childHeight","needsMainTrailingPos","needsCrossTrailingPos","shouldUpdate","skipLayout","lastLayout","requestedHeight","requestedWidth"],"mappings":"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","file":"css-layout.min.js","sourcesContent":["// UMD (Universal Module Definition)\n// See https://github.com/umdjs/umd for reference\n//\n// This file uses the following specific UMD implementation:\n// https://github.com/umdjs/umd/blob/master/templates/returnExports.js\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.computeLayout = factory();\n  }\n}(this, function() {\n  /**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nvar computeLayout = (function() {\n\n  var CSS_UNDEFINED;\n\n  var CSS_DIRECTION_INHERIT = 'inherit';\n  var CSS_DIRECTION_LTR = 'ltr';\n  var CSS_DIRECTION_RTL = 'rtl';\n\n  var CSS_FLEX_DIRECTION_ROW = 'row';\n  var CSS_FLEX_DIRECTION_ROW_REVERSE = 'row-reverse';\n  var CSS_FLEX_DIRECTION_COLUMN = 'column';\n  var CSS_FLEX_DIRECTION_COLUMN_REVERSE = 'column-reverse';\n\n  var CSS_JUSTIFY_FLEX_START = 'flex-start';\n  var CSS_JUSTIFY_CENTER = 'center';\n  var CSS_JUSTIFY_FLEX_END = 'flex-end';\n  var CSS_JUSTIFY_SPACE_BETWEEN = 'space-between';\n  var CSS_JUSTIFY_SPACE_AROUND = 'space-around';\n\n  var CSS_ALIGN_FLEX_START = 'flex-start';\n  var CSS_ALIGN_CENTER = 'center';\n  var CSS_ALIGN_FLEX_END = 'flex-end';\n  var CSS_ALIGN_STRETCH = 'stretch';\n\n  var CSS_POSITION_RELATIVE = 'relative';\n  var CSS_POSITION_ABSOLUTE = 'absolute';\n\n  var leading = {\n    'row': 'left',\n    'row-reverse': 'right',\n    'column': 'top',\n    'column-reverse': 'bottom'\n  };\n  var trailing = {\n    'row': 'right',\n    'row-reverse': 'left',\n    'column': 'bottom',\n    'column-reverse': 'top'\n  };\n  var pos = {\n    'row': 'left',\n    'row-reverse': 'right',\n    'column': 'top',\n    'column-reverse': 'bottom'\n  };\n  var dim = {\n    'row': 'width',\n    'row-reverse': 'width',\n    'column': 'height',\n    'column-reverse': 'height'\n  };\n\n  // When transpiled to Java / C the node type has layout, children and style\n  // properties. For the JavaScript version this function adds these properties\n  // if they don't already exist.\n  function fillNodes(node) {\n    if (!node.layout || node.isDirty) {\n      node.layout = {\n        width: undefined,\n        height: undefined,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      };\n    }\n\n    if (!node.style) {\n      node.style = {};\n    }\n\n    if (!node.children) {\n      node.children = [];\n    }\n\n    if (node.style.measure && node.children && node.children.length) {\n      throw new Error('Using custom measure function is supported only for leaf nodes.');\n    }\n\n    node.children.forEach(fillNodes);\n    return node;\n  }\n\n  function isUndefined(value) {\n    return value === undefined;\n  }\n\n  function isRowDirection(flexDirection) {\n    return flexDirection === CSS_FLEX_DIRECTION_ROW ||\n           flexDirection === CSS_FLEX_DIRECTION_ROW_REVERSE;\n  }\n\n  function isColumnDirection(flexDirection) {\n    return flexDirection === CSS_FLEX_DIRECTION_COLUMN ||\n           flexDirection === CSS_FLEX_DIRECTION_COLUMN_REVERSE;\n  }\n\n  function getLeadingMargin(node, axis) {\n    if (node.style.marginStart !== undefined && isRowDirection(axis)) {\n      return node.style.marginStart;\n    }\n\n    var value = null;\n    switch (axis) {\n      case 'row':            value = node.style.marginLeft;   break;\n      case 'row-reverse':    value = node.style.marginRight;  break;\n      case 'column':         value = node.style.marginTop;    break;\n      case 'column-reverse': value = node.style.marginBottom; break;\n    }\n\n    if (value !== undefined) {\n      return value;\n    }\n\n    if (node.style.margin !== undefined) {\n      return node.style.margin;\n    }\n\n    return 0;\n  }\n\n  function getTrailingMargin(node, axis) {\n    if (node.style.marginEnd !== undefined && isRowDirection(axis)) {\n      return node.style.marginEnd;\n    }\n\n    var value = null;\n    switch (axis) {\n      case 'row':            value = node.style.marginRight;  break;\n      case 'row-reverse':    value = node.style.marginLeft;   break;\n      case 'column':         value = node.style.marginBottom; break;\n      case 'column-reverse': value = node.style.marginTop;    break;\n    }\n\n    if (value != null) {\n      return value;\n    }\n\n    if (node.style.margin !== undefined) {\n      return node.style.margin;\n    }\n\n    return 0;\n  }\n\n  function getLeadingPadding(node, axis) {\n    if (node.style.paddingStart !== undefined && node.style.paddingStart >= 0\n        && isRowDirection(axis)) {\n      return node.style.paddingStart;\n    }\n\n    var value = null;\n    switch (axis) {\n      case 'row':            value = node.style.paddingLeft;   break;\n      case 'row-reverse':    value = node.style.paddingRight;  break;\n      case 'column':         value = node.style.paddingTop;    break;\n      case 'column-reverse': value = node.style.paddingBottom; break;\n    }\n\n    if (value != null && value >= 0) {\n      return value;\n    }\n\n    if (node.style.padding !== undefined && node.style.padding >= 0) {\n      return node.style.padding;\n    }\n\n    return 0;\n  }\n\n  function getTrailingPadding(node, axis) {\n    if (node.style.paddingEnd !== undefined && node.style.paddingEnd >= 0\n        && isRowDirection(axis)) {\n      return node.style.paddingEnd;\n    }\n\n    var value = null;\n    switch (axis) {\n      case 'row':            value = node.style.paddingRight;  break;\n      case 'row-reverse':    value = node.style.paddingLeft;   break;\n      case 'column':         value = node.style.paddingBottom; break;\n      case 'column-reverse': value = node.style.paddingTop;    break;\n    }\n\n    if (value != null && value >= 0) {\n      return value;\n    }\n\n    if (node.style.padding !== undefined && node.style.padding >= 0) {\n      return node.style.padding;\n    }\n\n    return 0;\n  }\n\n  function getLeadingBorder(node, axis) {\n    if (node.style.borderStartWidth !== undefined && node.style.borderStartWidth >= 0\n        && isRowDirection(axis)) {\n      return node.style.borderStartWidth;\n    }\n\n    var value = null;\n    switch (axis) {\n      case 'row':            value = node.style.borderLeftWidth;   break;\n      case 'row-reverse':    value = node.style.borderRightWidth;  break;\n      case 'column':         value = node.style.borderTopWidth;    break;\n      case 'column-reverse': value = node.style.borderBottomWidth; break;\n    }\n\n    if (value != null && value >= 0) {\n      return value;\n    }\n\n    if (node.style.borderWidth !== undefined && node.style.borderWidth >= 0) {\n      return node.style.borderWidth;\n    }\n\n    return 0;\n  }\n\n  function getTrailingBorder(node, axis) {\n    if (node.style.borderEndWidth !== undefined && node.style.borderEndWidth >= 0\n        && isRowDirection(axis)) {\n      return node.style.borderEndWidth;\n    }\n\n    var value = null;\n    switch (axis) {\n      case 'row':            value = node.style.borderRightWidth;  break;\n      case 'row-reverse':    value = node.style.borderLeftWidth;   break;\n      case 'column':         value = node.style.borderBottomWidth; break;\n      case 'column-reverse': value = node.style.borderTopWidth;    break;\n    }\n\n    if (value != null && value >= 0) {\n      return value;\n    }\n\n    if (node.style.borderWidth !== undefined && node.style.borderWidth >= 0) {\n      return node.style.borderWidth;\n    }\n\n    return 0;\n  }\n\n  function getLeadingPaddingAndBorder(node, axis) {\n    return getLeadingPadding(node, axis) + getLeadingBorder(node, axis);\n  }\n\n  function getTrailingPaddingAndBorder(node, axis) {\n    return getTrailingPadding(node, axis) + getTrailingBorder(node, axis);\n  }\n\n  function getBorderAxis(node, axis) {\n    return getLeadingBorder(node, axis) + getTrailingBorder(node, axis);\n  }\n\n  function getMarginAxis(node, axis) {\n    return getLeadingMargin(node, axis) + getTrailingMargin(node, axis);\n  }\n\n  function getPaddingAndBorderAxis(node, axis) {\n    return getLeadingPaddingAndBorder(node, axis) +\n        getTrailingPaddingAndBorder(node, axis);\n  }\n\n  function getJustifyContent(node) {\n    if (node.style.justifyContent) {\n      return node.style.justifyContent;\n    }\n    return 'flex-start';\n  }\n\n  function getAlignContent(node) {\n    if (node.style.alignContent) {\n      return node.style.alignContent;\n    }\n    return 'flex-start';\n  }\n\n  function getAlignItem(node, child) {\n    if (child.style.alignSelf) {\n      return child.style.alignSelf;\n    }\n    if (node.style.alignItems) {\n      return node.style.alignItems;\n    }\n    return 'stretch';\n  }\n\n  function resolveAxis(axis, direction) {\n    if (direction === CSS_DIRECTION_RTL) {\n      if (axis === CSS_FLEX_DIRECTION_ROW) {\n        return CSS_FLEX_DIRECTION_ROW_REVERSE;\n      } else if (axis === CSS_FLEX_DIRECTION_ROW_REVERSE) {\n        return CSS_FLEX_DIRECTION_ROW;\n      }\n    }\n\n    return axis;\n  }\n\n  function resolveDirection(node, parentDirection) {\n    var direction;\n    if (node.style.direction) {\n      direction = node.style.direction;\n    } else {\n      direction = CSS_DIRECTION_INHERIT;\n    }\n\n    if (direction === CSS_DIRECTION_INHERIT) {\n      direction = (parentDirection === undefined ? CSS_DIRECTION_LTR : parentDirection);\n    }\n\n    return direction;\n  }\n\n  function getFlexDirection(node) {\n    if (node.style.flexDirection) {\n      return node.style.flexDirection;\n    }\n    return CSS_FLEX_DIRECTION_COLUMN;\n  }\n\n  function getCrossFlexDirection(flexDirection, direction) {\n    if (isColumnDirection(flexDirection)) {\n      return resolveAxis(CSS_FLEX_DIRECTION_ROW, direction);\n    } else {\n      return CSS_FLEX_DIRECTION_COLUMN;\n    }\n  }\n\n  function getPositionType(node) {\n    if (node.style.position) {\n      return node.style.position;\n    }\n    return 'relative';\n  }\n\n  function isFlex(node) {\n    return (\n      getPositionType(node) === CSS_POSITION_RELATIVE &&\n      node.style.flex > 0\n    );\n  }\n\n  function isFlexWrap(node) {\n    return node.style.flexWrap === 'wrap';\n  }\n\n  function getDimWithMargin(node, axis) {\n    return node.layout[dim[axis]] + getMarginAxis(node, axis);\n  }\n\n  function isStyleDimDefined(node, axis) {\n    return node.style[dim[axis]] !== undefined && node.style[dim[axis]] >= 0;\n  }\n\n  function isLayoutDimDefined(node, axis) {\n    return node.layout[dim[axis]] !== undefined && node.layout[dim[axis]] >= 0;\n  }\n\n  function isPosDefined(node, pos) {\n    return node.style[pos] !== undefined;\n  }\n\n  function isMeasureDefined(node) {\n    return node.style.measure !== undefined;\n  }\n\n  function getPosition(node, pos) {\n    if (node.style[pos] !== undefined) {\n      return node.style[pos];\n    }\n    return 0;\n  }\n\n  function boundAxis(node, axis, value) {\n    var min = {\n      'row': node.style.minWidth,\n      'row-reverse': node.style.minWidth,\n      'column': node.style.minHeight,\n      'column-reverse': node.style.minHeight\n    }[axis];\n\n    var max = {\n      'row': node.style.maxWidth,\n      'row-reverse': node.style.maxWidth,\n      'column': node.style.maxHeight,\n      'column-reverse': node.style.maxHeight\n    }[axis];\n\n    var boundValue = value;\n    if (max !== undefined && max >= 0 && boundValue > max) {\n      boundValue = max;\n    }\n    if (min !== undefined && min >= 0 && boundValue < min) {\n      boundValue = min;\n    }\n    return boundValue;\n  }\n\n  function fmaxf(a, b) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  // When the user specifically sets a value for width or height\n  function setDimensionFromStyle(node, axis) {\n    // The parent already computed us a width or height. We just skip it\n    if (isLayoutDimDefined(node, axis)) {\n      return;\n    }\n    // We only run if there's a width or height defined\n    if (!isStyleDimDefined(node, axis)) {\n      return;\n    }\n\n    // The dimensions can never be smaller than the padding and border\n    node.layout[dim[axis]] = fmaxf(\n      boundAxis(node, axis, node.style[dim[axis]]),\n      getPaddingAndBorderAxis(node, axis)\n    );\n  }\n\n  function setTrailingPosition(node, child, axis) {\n    child.layout[trailing[axis]] = node.layout[dim[axis]] -\n        child.layout[dim[axis]] - child.layout[pos[axis]];\n  }\n\n  // If both left and right are defined, then use left. Otherwise return\n  // +left or -right depending on which is defined.\n  function getRelativePosition(node, axis) {\n    if (node.style[leading[axis]] !== undefined) {\n      return getPosition(node, leading[axis]);\n    }\n    return -getPosition(node, trailing[axis]);\n  }\n\n  function layoutNodeImpl(node, parentMaxWidth, parentMaxHeight, /*css_direction_t*/parentDirection) {\n    var/*css_direction_t*/ direction = resolveDirection(node, parentDirection);\n    var/*(c)!css_flex_direction_t*//*(java)!int*/ mainAxis = resolveAxis(getFlexDirection(node), direction);\n    var/*(c)!css_flex_direction_t*//*(java)!int*/ crossAxis = getCrossFlexDirection(mainAxis, direction);\n    var/*(c)!css_flex_direction_t*//*(java)!int*/ resolvedRowAxis = resolveAxis(CSS_FLEX_DIRECTION_ROW, direction);\n\n    // Handle width and height style attributes\n    setDimensionFromStyle(node, mainAxis);\n    setDimensionFromStyle(node, crossAxis);\n\n    // Set the resolved resolution in the node's layout\n    node.layout.direction = direction;\n\n    // The position is set by the parent, but we need to complete it with a\n    // delta composed of the margin and left/top/right/bottom\n    node.layout[leading[mainAxis]] += getLeadingMargin(node, mainAxis) +\n      getRelativePosition(node, mainAxis);\n    node.layout[trailing[mainAxis]] += getTrailingMargin(node, mainAxis) +\n      getRelativePosition(node, mainAxis);\n    node.layout[leading[crossAxis]] += getLeadingMargin(node, crossAxis) +\n      getRelativePosition(node, crossAxis);\n    node.layout[trailing[crossAxis]] += getTrailingMargin(node, crossAxis) +\n      getRelativePosition(node, crossAxis);\n\n    // Inline immutable values from the target node to avoid excessive method\n    // invocations during the layout calculation.\n    var/*int*/ childCount = node.children.length;\n    var/*float*/ paddingAndBorderAxisResolvedRow = getPaddingAndBorderAxis(node, resolvedRowAxis);\n    var/*float*/ paddingAndBorderAxisColumn = getPaddingAndBorderAxis(node, CSS_FLEX_DIRECTION_COLUMN);\n\n    if (isMeasureDefined(node)) {\n      var/*bool*/ isResolvedRowDimDefined = isLayoutDimDefined(node, resolvedRowAxis);\n\n      var/*float*/ width = CSS_UNDEFINED;\n      if (isStyleDimDefined(node, resolvedRowAxis)) {\n        width = node.style.width;\n      } else if (isResolvedRowDimDefined) {\n        width = node.layout[dim[resolvedRowAxis]];\n      } else {\n        width = parentMaxWidth -\n          getMarginAxis(node, resolvedRowAxis);\n      }\n      width -= paddingAndBorderAxisResolvedRow;\n\n      var/*float*/ height = CSS_UNDEFINED;\n      if (isStyleDimDefined(node, CSS_FLEX_DIRECTION_COLUMN)) {\n        height = node.style.height;\n      } else if (isLayoutDimDefined(node, CSS_FLEX_DIRECTION_COLUMN)) {\n        height = node.layout[dim[CSS_FLEX_DIRECTION_COLUMN]];\n      } else {\n        height = parentMaxHeight -\n          getMarginAxis(node, resolvedRowAxis);\n      }\n      height -= getPaddingAndBorderAxis(node, CSS_FLEX_DIRECTION_COLUMN);\n\n      // We only need to give a dimension for the text if we haven't got any\n      // for it computed yet. It can either be from the style attribute or because\n      // the element is flexible.\n      var/*bool*/ isRowUndefined = !isStyleDimDefined(node, resolvedRowAxis) && !isResolvedRowDimDefined;\n      var/*bool*/ isColumnUndefined = !isStyleDimDefined(node, CSS_FLEX_DIRECTION_COLUMN) &&\n        isUndefined(node.layout[dim[CSS_FLEX_DIRECTION_COLUMN]]);\n\n      // Let's not measure the text if we already know both dimensions\n      if (isRowUndefined || isColumnUndefined) {\n        var/*css_dim_t*/ measureDim = node.style.measure(\n          /*(c)!node->context,*/\n          /*(java)!layoutContext.measureOutput,*/\n          width,\n          height\n        );\n        if (isRowUndefined) {\n          node.layout.width = measureDim.width +\n            paddingAndBorderAxisResolvedRow;\n        }\n        if (isColumnUndefined) {\n          node.layout.height = measureDim.height +\n            paddingAndBorderAxisColumn;\n        }\n      }\n      if (childCount === 0) {\n        return;\n      }\n    }\n\n    var/*bool*/ isNodeFlexWrap = isFlexWrap(node);\n\n    var/*css_justify_t*/ justifyContent = getJustifyContent(node);\n\n    var/*float*/ leadingPaddingAndBorderMain = getLeadingPaddingAndBorder(node, mainAxis);\n    var/*float*/ leadingPaddingAndBorderCross = getLeadingPaddingAndBorder(node, crossAxis);\n    var/*float*/ paddingAndBorderAxisMain = getPaddingAndBorderAxis(node, mainAxis);\n    var/*float*/ paddingAndBorderAxisCross = getPaddingAndBorderAxis(node, crossAxis);\n\n    var/*bool*/ isMainDimDefined = isLayoutDimDefined(node, mainAxis);\n    var/*bool*/ isCrossDimDefined = isLayoutDimDefined(node, crossAxis);\n    var/*bool*/ isMainRowDirection = isRowDirection(mainAxis);\n\n    var/*int*/ i;\n    var/*int*/ ii;\n    var/*css_node_t**/ child;\n    var/*(c)!css_flex_direction_t*//*(java)!int*/ axis;\n\n    var/*css_node_t**/ firstAbsoluteChild = null;\n    var/*css_node_t**/ currentAbsoluteChild = null;\n\n    var/*float*/ definedMainDim = CSS_UNDEFINED;\n    if (isMainDimDefined) {\n      definedMainDim = node.layout[dim[mainAxis]] - paddingAndBorderAxisMain;\n    }\n\n    // We want to execute the next two loops one per line with flex-wrap\n    var/*int*/ startLine = 0;\n    var/*int*/ endLine = 0;\n    // var/*int*/ nextOffset = 0;\n    var/*int*/ alreadyComputedNextLayout = 0;\n    // We aggregate the total dimensions of the container in those two variables\n    var/*float*/ linesCrossDim = 0;\n    var/*float*/ linesMainDim = 0;\n    var/*int*/ linesCount = 0;\n    while (endLine < childCount) {\n      // <Loop A> Layout non flexible children and count children by type\n\n      // mainContentDim is accumulation of the dimensions and margin of all the\n      // non flexible children. This will be used in order to either set the\n      // dimensions of the node if none already exist, or to compute the\n      // remaining space left for the flexible children.\n      var/*float*/ mainContentDim = 0;\n\n      // There are three kind of children, non flexible, flexible and absolute.\n      // We need to know how many there are in order to distribute the space.\n      var/*int*/ flexibleChildrenCount = 0;\n      var/*float*/ totalFlexible = 0;\n      var/*int*/ nonFlexibleChildrenCount = 0;\n\n      // Use the line loop to position children in the main axis for as long\n      // as they are using a simple stacking behaviour. Children that are\n      // immediately stacked in the initial loop will not be touched again\n      // in <Loop C>.\n      var/*bool*/ isSimpleStackMain =\n          (isMainDimDefined && justifyContent === CSS_JUSTIFY_FLEX_START) ||\n          (!isMainDimDefined && justifyContent !== CSS_JUSTIFY_CENTER);\n      var/*int*/ firstComplexMain = (isSimpleStackMain ? childCount : startLine);\n\n      // Use the initial line loop to position children in the cross axis for\n      // as long as they are relatively positioned with alignment STRETCH or\n      // FLEX_START. Children that are immediately stacked in the initial loop\n      // will not be touched again in <Loop D>.\n      var/*bool*/ isSimpleStackCross = true;\n      var/*int*/ firstComplexCross = childCount;\n\n      var/*css_node_t**/ firstFlexChild = null;\n      var/*css_node_t**/ currentFlexChild = null;\n\n      var/*float*/ mainDim = leadingPaddingAndBorderMain;\n      var/*float*/ crossDim = 0;\n\n      var/*float*/ maxWidth = CSS_UNDEFINED;\n      var/*float*/ maxHeight = CSS_UNDEFINED;\n      for (i = startLine; i < childCount; ++i) {\n        child = node.children[i];\n        child.lineIndex = linesCount;\n\n        child.nextAbsoluteChild = null;\n        child.nextFlexChild = null;\n\n        var/*css_align_t*/ alignItem = getAlignItem(node, child);\n\n        // Pre-fill cross axis dimensions when the child is using stretch before\n        // we call the recursive layout pass\n        if (alignItem === CSS_ALIGN_STRETCH &&\n            getPositionType(child) === CSS_POSITION_RELATIVE &&\n            isCrossDimDefined &&\n            !isStyleDimDefined(child, crossAxis)) {\n          child.layout[dim[crossAxis]] = fmaxf(\n            boundAxis(child, crossAxis, node.layout[dim[crossAxis]] -\n              paddingAndBorderAxisCross - getMarginAxis(child, crossAxis)),\n            // You never want to go smaller than padding\n            getPaddingAndBorderAxis(child, crossAxis)\n          );\n        } else if (getPositionType(child) === CSS_POSITION_ABSOLUTE) {\n          // Store a private linked list of absolutely positioned children\n          // so that we can efficiently traverse them later.\n          if (firstAbsoluteChild === null) {\n            firstAbsoluteChild = child;\n          }\n          if (currentAbsoluteChild !== null) {\n            currentAbsoluteChild.nextAbsoluteChild = child;\n          }\n          currentAbsoluteChild = child;\n\n          // Pre-fill dimensions when using absolute position and both offsets for the axis are defined (either both\n          // left and right or top and bottom).\n          for (ii = 0; ii < 2; ii++) {\n            axis = (ii !== 0) ? CSS_FLEX_DIRECTION_ROW : CSS_FLEX_DIRECTION_COLUMN;\n            if (isLayoutDimDefined(node, axis) &&\n                !isStyleDimDefined(child, axis) &&\n                isPosDefined(child, leading[axis]) &&\n                isPosDefined(child, trailing[axis])) {\n              child.layout[dim[axis]] = fmaxf(\n                boundAxis(child, axis, node.layout[dim[axis]] -\n                  getPaddingAndBorderAxis(node, axis) -\n                  getMarginAxis(child, axis) -\n                  getPosition(child, leading[axis]) -\n                  getPosition(child, trailing[axis])),\n                // You never want to go smaller than padding\n                getPaddingAndBorderAxis(child, axis)\n              );\n            }\n          }\n        }\n\n        var/*float*/ nextContentDim = 0;\n\n        // It only makes sense to consider a child flexible if we have a computed\n        // dimension for the node.\n        if (isMainDimDefined && isFlex(child)) {\n          flexibleChildrenCount++;\n          totalFlexible += child.style.flex;\n\n          // Store a private linked list of flexible children so that we can\n          // efficiently traverse them later.\n          if (firstFlexChild === null) {\n            firstFlexChild = child;\n          }\n          if (currentFlexChild !== null) {\n            currentFlexChild.nextFlexChild = child;\n          }\n          currentFlexChild = child;\n\n          // Even if we don't know its exact size yet, we already know the padding,\n          // border and margin. We'll use this partial information, which represents\n          // the smallest possible size for the child, to compute the remaining\n          // available space.\n          nextContentDim = getPaddingAndBorderAxis(child, mainAxis) +\n            getMarginAxis(child, mainAxis);\n\n        } else {\n          maxWidth = CSS_UNDEFINED;\n          maxHeight = CSS_UNDEFINED;\n\n          if (!isMainRowDirection) {\n            if (isLayoutDimDefined(node, resolvedRowAxis)) {\n              maxWidth = node.layout[dim[resolvedRowAxis]] -\n                paddingAndBorderAxisResolvedRow;\n            } else {\n              maxWidth = parentMaxWidth -\n                getMarginAxis(node, resolvedRowAxis) -\n                paddingAndBorderAxisResolvedRow;\n            }\n          } else {\n            if (isLayoutDimDefined(node, CSS_FLEX_DIRECTION_COLUMN)) {\n              maxHeight = node.layout[dim[CSS_FLEX_DIRECTION_COLUMN]] -\n                  paddingAndBorderAxisColumn;\n            } else {\n              maxHeight = parentMaxHeight -\n                getMarginAxis(node, CSS_FLEX_DIRECTION_COLUMN) -\n                paddingAndBorderAxisColumn;\n            }\n          }\n\n          // This is the main recursive call. We layout non flexible children.\n          if (alreadyComputedNextLayout === 0) {\n            layoutNode(/*(java)!layoutContext, */child, maxWidth, maxHeight, direction);\n          }\n\n          // Absolute positioned elements do not take part of the layout, so we\n          // don't use them to compute mainContentDim\n          if (getPositionType(child) === CSS_POSITION_RELATIVE) {\n            nonFlexibleChildrenCount++;\n            // At this point we know the final size and margin of the element.\n            nextContentDim = getDimWithMargin(child, mainAxis);\n          }\n        }\n\n        // The element we are about to add would make us go to the next line\n        if (isNodeFlexWrap &&\n            isMainDimDefined &&\n            mainContentDim + nextContentDim > definedMainDim &&\n            // If there's only one element, then it's bigger than the content\n            // and needs its own line\n            i !== startLine) {\n          nonFlexibleChildrenCount--;\n          alreadyComputedNextLayout = 1;\n          break;\n        }\n\n        // Disable simple stacking in the main axis for the current line as\n        // we found a non-trivial child. The remaining children will be laid out\n        // in <Loop C>.\n        if (isSimpleStackMain &&\n            (getPositionType(child) !== CSS_POSITION_RELATIVE || isFlex(child))) {\n          isSimpleStackMain = false;\n          firstComplexMain = i;\n        }\n\n        // Disable simple stacking in the cross axis for the current line as\n        // we found a non-trivial child. The remaining children will be laid out\n        // in <Loop D>.\n        if (isSimpleStackCross &&\n            (getPositionType(child) !== CSS_POSITION_RELATIVE ||\n                (alignItem !== CSS_ALIGN_STRETCH && alignItem !== CSS_ALIGN_FLEX_START) ||\n                (alignItem == CSS_ALIGN_STRETCH && !isCrossDimDefined))) {\n          isSimpleStackCross = false;\n          firstComplexCross = i;\n        }\n\n        if (isSimpleStackMain) {\n          child.layout[pos[mainAxis]] += mainDim;\n          if (isMainDimDefined) {\n            setTrailingPosition(node, child, mainAxis);\n          }\n\n          mainDim += getDimWithMargin(child, mainAxis);\n          crossDim = fmaxf(crossDim, boundAxis(child, crossAxis, getDimWithMargin(child, crossAxis)));\n        }\n\n        if (isSimpleStackCross) {\n          child.layout[pos[crossAxis]] += linesCrossDim + leadingPaddingAndBorderCross;\n          if (isCrossDimDefined) {\n            setTrailingPosition(node, child, crossAxis);\n          }\n        }\n\n        alreadyComputedNextLayout = 0;\n        mainContentDim += nextContentDim;\n        endLine = i + 1;\n      }\n\n      // <Loop B> Layout flexible children and allocate empty space\n\n      // In order to position the elements in the main axis, we have two\n      // controls. The space between the beginning and the first element\n      // and the space between each two elements.\n      var/*float*/ leadingMainDim = 0;\n      var/*float*/ betweenMainDim = 0;\n\n      // The remaining available space that needs to be allocated\n      var/*float*/ remainingMainDim = 0;\n      if (isMainDimDefined) {\n        remainingMainDim = definedMainDim - mainContentDim;\n      } else {\n        remainingMainDim = fmaxf(mainContentDim, 0) - mainContentDim;\n      }\n\n      // If there are flexible children in the mix, they are going to fill the\n      // remaining space\n      if (flexibleChildrenCount !== 0) {\n        var/*float*/ flexibleMainDim = remainingMainDim / totalFlexible;\n        var/*float*/ baseMainDim;\n        var/*float*/ boundMainDim;\n\n        // If the flex share of remaining space doesn't meet min/max bounds,\n        // remove this child from flex calculations.\n        currentFlexChild = firstFlexChild;\n        while (currentFlexChild !== null) {\n          baseMainDim = flexibleMainDim * currentFlexChild.style.flex +\n              getPaddingAndBorderAxis(currentFlexChild, mainAxis);\n          boundMainDim = boundAxis(currentFlexChild, mainAxis, baseMainDim);\n\n          if (baseMainDim !== boundMainDim) {\n            remainingMainDim -= boundMainDim;\n            totalFlexible -= currentFlexChild.style.flex;\n          }\n\n          currentFlexChild = currentFlexChild.nextFlexChild;\n        }\n        flexibleMainDim = remainingMainDim / totalFlexible;\n\n        // The non flexible children can overflow the container, in this case\n        // we should just assume that there is no space available.\n        if (flexibleMainDim < 0) {\n          flexibleMainDim = 0;\n        }\n\n        currentFlexChild = firstFlexChild;\n        while (currentFlexChild !== null) {\n          // At this point we know the final size of the element in the main\n          // dimension\n          currentFlexChild.layout[dim[mainAxis]] = boundAxis(currentFlexChild, mainAxis,\n            flexibleMainDim * currentFlexChild.style.flex +\n                getPaddingAndBorderAxis(currentFlexChild, mainAxis)\n          );\n\n          maxWidth = CSS_UNDEFINED;\n          if (isLayoutDimDefined(node, resolvedRowAxis)) {\n            maxWidth = node.layout[dim[resolvedRowAxis]] -\n              paddingAndBorderAxisResolvedRow;\n          } else if (!isMainRowDirection) {\n            maxWidth = parentMaxWidth -\n              getMarginAxis(node, resolvedRowAxis) -\n              paddingAndBorderAxisResolvedRow;\n          }\n          maxHeight = CSS_UNDEFINED;\n          if (isLayoutDimDefined(node, CSS_FLEX_DIRECTION_COLUMN)) {\n            maxHeight = node.layout[dim[CSS_FLEX_DIRECTION_COLUMN]] -\n              paddingAndBorderAxisColumn;\n          } else if (isMainRowDirection) {\n            maxHeight = parentMaxHeight -\n              getMarginAxis(node, CSS_FLEX_DIRECTION_COLUMN) -\n              paddingAndBorderAxisColumn;\n          }\n\n          // And we recursively call the layout algorithm for this child\n          layoutNode(/*(java)!layoutContext, */currentFlexChild, maxWidth, maxHeight, direction);\n\n          child = currentFlexChild;\n          currentFlexChild = currentFlexChild.nextFlexChild;\n          child.nextFlexChild = null;\n        }\n\n      // We use justifyContent to figure out how to allocate the remaining\n      // space available\n      } else if (justifyContent !== CSS_JUSTIFY_FLEX_START) {\n        if (justifyContent === CSS_JUSTIFY_CENTER) {\n          leadingMainDim = remainingMainDim / 2;\n        } else if (justifyContent === CSS_JUSTIFY_FLEX_END) {\n          leadingMainDim = remainingMainDim;\n        } else if (justifyContent === CSS_JUSTIFY_SPACE_BETWEEN) {\n          remainingMainDim = fmaxf(remainingMainDim, 0);\n          if (flexibleChildrenCount + nonFlexibleChildrenCount - 1 !== 0) {\n            betweenMainDim = remainingMainDim /\n              (flexibleChildrenCount + nonFlexibleChildrenCount - 1);\n          } else {\n            betweenMainDim = 0;\n          }\n        } else if (justifyContent === CSS_JUSTIFY_SPACE_AROUND) {\n          // Space on the edges is half of the space between elements\n          betweenMainDim = remainingMainDim /\n            (flexibleChildrenCount + nonFlexibleChildrenCount);\n          leadingMainDim = betweenMainDim / 2;\n        }\n      }\n\n      // <Loop C> Position elements in the main axis and compute dimensions\n\n      // At this point, all the children have their dimensions set. We need to\n      // find their position. In order to do that, we accumulate data in\n      // variables that are also useful to compute the total dimensions of the\n      // container!\n      mainDim += leadingMainDim;\n\n      for (i = firstComplexMain; i < endLine; ++i) {\n        child = node.children[i];\n\n        if (getPositionType(child) === CSS_POSITION_ABSOLUTE &&\n            isPosDefined(child, leading[mainAxis])) {\n          // In case the child is position absolute and has left/top being\n          // defined, we override the position to whatever the user said\n          // (and margin/border).\n          child.layout[pos[mainAxis]] = getPosition(child, leading[mainAxis]) +\n            getLeadingBorder(node, mainAxis) +\n            getLeadingMargin(child, mainAxis);\n        } else {\n          // If the child is position absolute (without top/left) or relative,\n          // we put it at the current accumulated offset.\n          child.layout[pos[mainAxis]] += mainDim;\n\n          // Define the trailing position accordingly.\n          if (isMainDimDefined) {\n            setTrailingPosition(node, child, mainAxis);\n          }\n\n          // Now that we placed the element, we need to update the variables\n          // We only need to do that for relative elements. Absolute elements\n          // do not take part in that phase.\n          if (getPositionType(child) === CSS_POSITION_RELATIVE) {\n            // The main dimension is the sum of all the elements dimension plus\n            // the spacing.\n            mainDim += betweenMainDim + getDimWithMargin(child, mainAxis);\n            // The cross dimension is the max of the elements dimension since there\n            // can only be one element in that cross dimension.\n            crossDim = fmaxf(crossDim, boundAxis(child, crossAxis, getDimWithMargin(child, crossAxis)));\n          }\n        }\n      }\n\n      var/*float*/ containerCrossAxis = node.layout[dim[crossAxis]];\n      if (!isCrossDimDefined) {\n        containerCrossAxis = fmaxf(\n          // For the cross dim, we add both sides at the end because the value\n          // is aggregate via a max function. Intermediate negative values\n          // can mess this computation otherwise\n          boundAxis(node, crossAxis, crossDim + paddingAndBorderAxisCross),\n          paddingAndBorderAxisCross\n        );\n      }\n\n      // <Loop D> Position elements in the cross axis\n      for (i = firstComplexCross; i < endLine; ++i) {\n        child = node.children[i];\n\n        if (getPositionType(child) === CSS_POSITION_ABSOLUTE &&\n            isPosDefined(child, leading[crossAxis])) {\n          // In case the child is absolutely positionned and has a\n          // top/left/bottom/right being set, we override all the previously\n          // computed positions to set it correctly.\n          child.layout[pos[crossAxis]] = getPosition(child, leading[crossAxis]) +\n            getLeadingBorder(node, crossAxis) +\n            getLeadingMargin(child, crossAxis);\n\n        } else {\n          var/*float*/ leadingCrossDim = leadingPaddingAndBorderCross;\n\n          // For a relative children, we're either using alignItems (parent) or\n          // alignSelf (child) in order to determine the position in the cross axis\n          if (getPositionType(child) === CSS_POSITION_RELATIVE) {\n            /*eslint-disable */\n            // This variable is intentionally re-defined as the code is transpiled to a block scope language\n            var/*css_align_t*/ alignItem = getAlignItem(node, child);\n            /*eslint-enable */\n            if (alignItem === CSS_ALIGN_STRETCH) {\n              // You can only stretch if the dimension has not already been defined\n              // previously.\n              if (!isStyleDimDefined(child, crossAxis)) {\n                var/*float*/ dimCrossAxis = child.layout[dim[crossAxis]];\n                child.layout[dim[crossAxis]] = fmaxf(\n                  boundAxis(child, crossAxis, containerCrossAxis -\n                    paddingAndBorderAxisCross - getMarginAxis(child, crossAxis)),\n                  // You never want to go smaller than padding\n                  getPaddingAndBorderAxis(child, crossAxis)\n                );\n\n                // If the size has changed, and this child has children we need to re-layout this child\n                if (dimCrossAxis != child.layout[dim[crossAxis]] && child.children.length > 0) {\n                  // Reset child margins before re-layout as they are added back in layoutNode and would be doubled\n                  child.layout[leading[mainAxis]] -= getLeadingMargin(child, mainAxis) +\n                    getRelativePosition(child, mainAxis);\n                  child.layout[trailing[mainAxis]] -= getTrailingMargin(child, mainAxis) +\n                    getRelativePosition(child, mainAxis);\n                  child.layout[leading[crossAxis]] -= getLeadingMargin(child, crossAxis) +\n                    getRelativePosition(child, crossAxis);\n                  child.layout[trailing[crossAxis]] -= getTrailingMargin(child, crossAxis) +\n                    getRelativePosition(child, crossAxis);\n\n                  layoutNode(/*(java)!layoutContext, */child, maxWidth, maxHeight, direction);\n                }\n              }\n            } else if (alignItem !== CSS_ALIGN_FLEX_START) {\n              // The remaining space between the parent dimensions+padding and child\n              // dimensions+margin.\n              var/*float*/ remainingCrossDim = containerCrossAxis -\n                paddingAndBorderAxisCross - getDimWithMargin(child, crossAxis);\n\n              if (alignItem === CSS_ALIGN_CENTER) {\n                leadingCrossDim += remainingCrossDim / 2;\n              } else { // CSS_ALIGN_FLEX_END\n                leadingCrossDim += remainingCrossDim;\n              }\n            }\n          }\n\n          // And we apply the position\n          child.layout[pos[crossAxis]] += linesCrossDim + leadingCrossDim;\n\n          // Define the trailing position accordingly.\n          if (isCrossDimDefined) {\n            setTrailingPosition(node, child, crossAxis);\n          }\n        }\n      }\n\n      linesCrossDim += crossDim;\n      linesMainDim = fmaxf(linesMainDim, mainDim);\n      linesCount += 1;\n      startLine = endLine;\n    }\n\n    // <Loop E>\n    //\n    // Note(prenaux): More than one line, we need to layout the crossAxis\n    // according to alignContent.\n    //\n    // Note that we could probably remove <Loop D> and handle the one line case\n    // here too, but for the moment this is safer since it won't interfere with\n    // previously working code.\n    //\n    // See specs:\n    // http://www.w3.org/TR/2012/CR-css3-flexbox-20120918/#layout-algorithm\n    // section 9.4\n    //\n    if (linesCount > 1 && isCrossDimDefined) {\n      var/*float*/ nodeCrossAxisInnerSize = node.layout[dim[crossAxis]] -\n          paddingAndBorderAxisCross;\n      var/*float*/ remainingAlignContentDim = nodeCrossAxisInnerSize - linesCrossDim;\n\n      var/*float*/ crossDimLead = 0;\n      var/*float*/ currentLead = leadingPaddingAndBorderCross;\n\n      var/*css_align_t*/ alignContent = getAlignContent(node);\n      if (alignContent === CSS_ALIGN_FLEX_END) {\n        currentLead += remainingAlignContentDim;\n      } else if (alignContent === CSS_ALIGN_CENTER) {\n        currentLead += remainingAlignContentDim / 2;\n      } else if (alignContent === CSS_ALIGN_STRETCH) {\n        if (nodeCrossAxisInnerSize > linesCrossDim) {\n          crossDimLead = (remainingAlignContentDim / linesCount);\n        }\n      }\n\n      var/*int*/ endIndex = 0;\n      for (i = 0; i < linesCount; ++i) {\n        var/*int*/ startIndex = endIndex;\n\n        // compute the line's height and find the endIndex\n        var/*float*/ lineHeight = 0;\n        for (ii = startIndex; ii < childCount; ++ii) {\n          child = node.children[ii];\n          if (getPositionType(child) !== CSS_POSITION_RELATIVE) {\n            continue;\n          }\n          if (child.lineIndex !== i) {\n            break;\n          }\n          if (isLayoutDimDefined(child, crossAxis)) {\n            lineHeight = fmaxf(\n              lineHeight,\n              child.layout[dim[crossAxis]] + getMarginAxis(child, crossAxis)\n            );\n          }\n        }\n        endIndex = ii;\n        lineHeight += crossDimLead;\n\n        for (ii = startIndex; ii < endIndex; ++ii) {\n          child = node.children[ii];\n          if (getPositionType(child) !== CSS_POSITION_RELATIVE) {\n            continue;\n          }\n\n          var/*css_align_t*/ alignContentAlignItem = getAlignItem(node, child);\n          if (alignContentAlignItem === CSS_ALIGN_FLEX_START) {\n            child.layout[pos[crossAxis]] = currentLead + getLeadingMargin(child, crossAxis);\n          } else if (alignContentAlignItem === CSS_ALIGN_FLEX_END) {\n            child.layout[pos[crossAxis]] = currentLead + lineHeight - getTrailingMargin(child, crossAxis) - child.layout[dim[crossAxis]];\n          } else if (alignContentAlignItem === CSS_ALIGN_CENTER) {\n            var/*float*/ childHeight = child.layout[dim[crossAxis]];\n            child.layout[pos[crossAxis]] = currentLead + (lineHeight - childHeight) / 2;\n          } else if (alignContentAlignItem === CSS_ALIGN_STRETCH) {\n            child.layout[pos[crossAxis]] = currentLead + getLeadingMargin(child, crossAxis);\n            // TODO(prenaux): Correctly set the height of items with undefined\n            //                (auto) crossAxis dimension.\n          }\n        }\n\n        currentLead += lineHeight;\n      }\n    }\n\n    var/*bool*/ needsMainTrailingPos = false;\n    var/*bool*/ needsCrossTrailingPos = false;\n\n    // If the user didn't specify a width or height, and it has not been set\n    // by the container, then we set it via the children.\n    if (!isMainDimDefined) {\n      node.layout[dim[mainAxis]] = fmaxf(\n        // We're missing the last padding at this point to get the final\n        // dimension\n        boundAxis(node, mainAxis, linesMainDim + getTrailingPaddingAndBorder(node, mainAxis)),\n        // We can never assign a width smaller than the padding and borders\n        paddingAndBorderAxisMain\n      );\n\n      if (mainAxis === CSS_FLEX_DIRECTION_ROW_REVERSE ||\n          mainAxis === CSS_FLEX_DIRECTION_COLUMN_REVERSE) {\n        needsMainTrailingPos = true;\n      }\n    }\n\n    if (!isCrossDimDefined) {\n      node.layout[dim[crossAxis]] = fmaxf(\n        // For the cross dim, we add both sides at the end because the value\n        // is aggregate via a max function. Intermediate negative values\n        // can mess this computation otherwise\n        boundAxis(node, crossAxis, linesCrossDim + paddingAndBorderAxisCross),\n        paddingAndBorderAxisCross\n      );\n\n      if (crossAxis === CSS_FLEX_DIRECTION_ROW_REVERSE ||\n          crossAxis === CSS_FLEX_DIRECTION_COLUMN_REVERSE) {\n        needsCrossTrailingPos = true;\n      }\n    }\n\n    // <Loop F> Set trailing position if necessary\n    if (needsMainTrailingPos || needsCrossTrailingPos) {\n      for (i = 0; i < childCount; ++i) {\n        child = node.children[i];\n\n        if (needsMainTrailingPos) {\n          setTrailingPosition(node, child, mainAxis);\n        }\n\n        if (needsCrossTrailingPos) {\n          setTrailingPosition(node, child, crossAxis);\n        }\n      }\n    }\n\n    // <Loop G> Calculate dimensions for absolutely positioned elements\n    currentAbsoluteChild = firstAbsoluteChild;\n    while (currentAbsoluteChild !== null) {\n      // Pre-fill dimensions when using absolute position and both offsets for\n      // the axis are defined (either both left and right or top and bottom).\n      for (ii = 0; ii < 2; ii++) {\n        axis = (ii !== 0) ? CSS_FLEX_DIRECTION_ROW : CSS_FLEX_DIRECTION_COLUMN;\n\n        if (isLayoutDimDefined(node, axis) &&\n            !isStyleDimDefined(currentAbsoluteChild, axis) &&\n            isPosDefined(currentAbsoluteChild, leading[axis]) &&\n            isPosDefined(currentAbsoluteChild, trailing[axis])) {\n          currentAbsoluteChild.layout[dim[axis]] = fmaxf(\n            boundAxis(currentAbsoluteChild, axis, node.layout[dim[axis]] -\n              getBorderAxis(node, axis) -\n              getMarginAxis(currentAbsoluteChild, axis) -\n              getPosition(currentAbsoluteChild, leading[axis]) -\n              getPosition(currentAbsoluteChild, trailing[axis])\n            ),\n            // You never want to go smaller than padding\n            getPaddingAndBorderAxis(currentAbsoluteChild, axis)\n          );\n        }\n\n        if (isPosDefined(currentAbsoluteChild, trailing[axis]) &&\n            !isPosDefined(currentAbsoluteChild, leading[axis])) {\n          currentAbsoluteChild.layout[leading[axis]] =\n            node.layout[dim[axis]] -\n            currentAbsoluteChild.layout[dim[axis]] -\n            getPosition(currentAbsoluteChild, trailing[axis]);\n        }\n      }\n\n      child = currentAbsoluteChild;\n      currentAbsoluteChild = currentAbsoluteChild.nextAbsoluteChild;\n      child.nextAbsoluteChild = null;\n    }\n  }\n\n  function layoutNode(node, parentMaxWidth, parentMaxHeight, parentDirection) {\n    node.shouldUpdate = true;\n\n    var direction = node.style.direction || CSS_DIRECTION_LTR;\n    var skipLayout =\n      !node.isDirty &&\n      node.lastLayout &&\n      node.lastLayout.requestedHeight === node.layout.height &&\n      node.lastLayout.requestedWidth === node.layout.width &&\n      node.lastLayout.parentMaxWidth === parentMaxWidth &&\n      node.lastLayout.parentMaxHeight === parentMaxHeight &&\n      node.lastLayout.direction === direction;\n\n    if (skipLayout) {\n      node.layout.width = node.lastLayout.width;\n      node.layout.height = node.lastLayout.height;\n      node.layout.top = node.lastLayout.top;\n      node.layout.left = node.lastLayout.left;\n    } else {\n      if (!node.lastLayout) {\n        node.lastLayout = {};\n      }\n\n      node.lastLayout.requestedWidth = node.layout.width;\n      node.lastLayout.requestedHeight = node.layout.height;\n      node.lastLayout.parentMaxWidth = parentMaxWidth;\n      node.lastLayout.parentMaxHeight = parentMaxHeight;\n      node.lastLayout.direction = direction;\n\n      // Reset child layouts\n      node.children.forEach(function(child) {\n        child.layout.width = undefined;\n        child.layout.height = undefined;\n        child.layout.top = 0;\n        child.layout.left = 0;\n      });\n\n      layoutNodeImpl(node, parentMaxWidth, parentMaxHeight, parentDirection);\n\n      node.lastLayout.width = node.layout.width;\n      node.lastLayout.height = node.layout.height;\n      node.lastLayout.top = node.layout.top;\n      node.lastLayout.left = node.layout.left;\n    }\n  }\n\n  return {\n    layoutNodeImpl: layoutNodeImpl,\n    computeLayout: layoutNode,\n    fillNodes: fillNodes\n  };\n})();\n\n// This module export is only used for the purposes of unit testing this file. When\n// the library is packaged this file is included within css-layout.js which forms\n// the public API.\nif (typeof exports === 'object') {\n  module.exports = computeLayout;\n}\n\n\n  return function(node) {\n    /*eslint-disable */\n    // disabling ESLint because this code relies on the above include\n    computeLayout.fillNodes(node);\n    computeLayout.computeLayout(node);\n    /*eslint-enable */\n  };\n}));\n"]}